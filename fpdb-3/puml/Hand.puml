@startuml classes
set namespaceSeparator none
class "DrawHand" as Hand.DrawHand {
  actionStreets : list
  allStreets : list
  bb
  communityStreets : list
  config
  discardStreets : list
  handid_selected
  holeStreets : list
  in_path : str
  maxseats : int
  sb
  streetList : list
  tablename
  addShownCards(cards, player, shown, mucked, dealt, string)
  holecardsAsSet(street, player)
  join_holecards(player, asList, street)
  writeHand(fh)
}
class "Hand" as Hand.Hand {
  ACTION : dict
  LCS : dict
  MS : dict
  SYMBOL : dict
  UPS : dict
  actions : dict
  addOnCost : int
  added : NoneType
  addedCurrency : NoneType
  adjustCollected : bool
  bets : dict
  board : dict
  buttonpos : int
  buyInChips : NoneType
  buyin : NoneType
  buyinCurrency : NoneType
  cacheSessions
  callHud
  cancelled : bool
  cashedOut : bool
  chanceCount : int
  checkForUncalled : bool
  collected : list
  collectees : dict
  config
  counted_seats : int
  dbid_gt : int
  dbid_hands : int
  dbid_hpid : NoneType
  dbid_pids : NoneType
  dealt : set
  discards : dict
  endBounty : dict
  entryId : int
  fastFold : bool
  fee : NoneType
  folded : set
  gametype
  gametyperow : tuple
  guaranteeAmt : int
  handText
  handid : int
  hands
  handsactions
  handsplayers
  handspots
  handsstove
  hero : str
  holecards : dict
  in_path : NoneType
  isAddOn : bool
  isCashOut : bool
  isChance : bool
  isDoubleOrNothing : bool
  isFast : bool
  isFifty50 : bool
  isFlighted : bool
  isGuarantee : bool
  isHomeGame : bool
  isKO : bool
  isMatrix : bool
  isMultiEntry : bool
  isNewToGame : bool
  isOnDemand : bool
  isProgressive : bool
  isReEntry : bool
  isRebuy : bool
  isSatellite : bool
  isShootout : bool
  isSng : bool
  isSplit : bool
  isStep : bool
  isTime : bool
  is_duplicate : bool
  koBounty : int
  koCounts : dict
  lastBet : dict
  level : NoneType
  maxseats : NoneType
  mixed : NoneType
  mucked : set
  player_exists_cache : set
  players : list
  posted : list
  pot
  publicDB
  rake : NoneType
  rakes : dict
  rebuyCost : int
  roundPenny : bool
  runItTimes : int
  saveActions
  seating : list
  showdownStrings : dict
  shown : set
  siteId
  sitename
  sitout : set
  speed : str
  stack : str
  stacks : dict
  startTime : datetime, int
  stats
  stepNo : int
  streets : dict
  sym
  tablename : str
  timeAmt : int
  totalcollected : int, NoneType
  totalpot : NoneType
  tourNo : NoneType
  tourneyId : NoneType
  tourneyName : NoneType
  tourneyTypeId : NoneType
  tourneysPlayersIds : dict
  uncalledbets : bool
  actionString(act, street)
  addAllIn(street, player, amount)
  addAnte(player, ante)
  addBet(street, player, amount)
  addBlind(player, blindtype, amount)
  addCall(street, player, amount)
  addCallTo(street, player, amountTo)
  addCallandRaise(street, player, amount)
  addCheck(street, player)
  addCollectPot(player, pot)
  addDiscard(street, player, num, cards)
  addFold(street, player)
  addHoleCards(street, player, open, closed, shown, mucked, dealt)
  addPlayer(seat, name, chips, position, sitout, bounty)
  addRaiseBy(street, player, amountBy)
  addRaiseTo(street, player, amountTo)
  addSTP(amount)
  addStandsPat(street, player, cards)
  addStreets(match)
  assembleHand()
  card(c)
  checkPlayerExists(player, source)
  discardDrawHoleCards(cards, player, street)
  getGameTypeAsString()
  getHandId(db, id)
  getStakesAsString()
  getStreetTotals()
  get_actions_short(player, street)
  get_actions_short_streets(player)
  get_player_position(player)
  insertHands(db, fileId, doinsert, printtest)
  insertHandsActions(db, doinsert, printtest)
  insertHandsPlayers(db, doinsert, printtest)
  insertHandsStove(db, doinsert)
  prepInsert(db, printtest)
  printHand()
  removePlayer(name)
  select(db, handId)
  setCommunityCards(street, cards)
  setUncalledBets(value)
  sittingOut()
  totalPot()
  updateCardsCache(db, tz, doinsert)
  updateHudCache(db, doinsert)
  updatePositionsCache(db, tz, doinsert)
  updateSessionsCache(db, tz, doinsert)
  updateTourneyResults(db)
  writeGameLine()
  writeHand(fh)
  writeTableLine()
}
class "HoldemOmahaHand" as Hand.HoldemOmahaHand {
  actionStreets : list
  allStreets : list
  bb
  communityStreets : list
  config
  discardStreets : list
  handid_selected
  holeStreets : list
  in_path : str
  maxseats : int
  sb
  tablename
  addShownCards(cards, player, shown, mucked, dealt, string)
  join_holecards(player, asList)
  writeHand(fh)
}
class "Pot" as Hand.Pot {
  antes : dict
  committed : dict
  common : dict
  contenders : set
  handid : int
  pots : list
  returned : dict
  stp : int
  streettotals : dict
  sym : str
  total : NoneType
  addAntes(player, amount)
  addCommonMoney(player, amount)
  addFold(player)
  addMoney(player, amount)
  addPlayer(player)
  end()
  getTotalAtStreet(street)
  markTotal(street)
  removePlayer(player)
  setSTP(amount)
  setSym(sym)
}
class "StudHand" as Hand.StudHand {
  actionStreets : list
  allStreets : list
  bb
  communityStreets : list
  config
  discardStreets : list
  handid_selected
  holeStreets : list
  in_path : str
  maxseats : int
  sb
  streetList : list
  tablename
  addBringIn(player, bringin)
  addComplete(street, player, amountTo)
  addPlayerCards(player, street, open, closed)
  addShownCards(cards, player, shown, mucked, dealt, string)
  join_holecards(player, asList)
  writeHand(fh)
  writeHoleCards(street, player)
}
Hand.DrawHand --|> Hand.Hand
Hand.HoldemOmahaHand --|> Hand.Hand
Hand.StudHand --|> Hand.Hand
Hand.Pot --* Hand.Hand : pot
@enduml
