@startuml classes
set namespaceSeparator none
class "Aux_window" as Configuration.Aux_window {
}
class "Config" as Configuration.Config {
  appdata_path : bool
  aux_windows : dict
  config_path
  db_selected : NoneType, str
  dir_database
  dir_log : str
  doc : Document
  emails : dict
  example_copy : bool
  file : NoneType
  file_error : NoneType
  fpdb_root_path
  general
  graphics_path
  gui_cash_stats
  hhcs : dict
  imp
  install_method : str
  layout_sets : dict
  log_file
  os_family : str, bool
  popup_windows : dict
  posix : bool
  pyfpdb_path
  python_version : str
  raw_hands
  raw_tourneys
  site_ids : dict
  stat_sets : dict
  supported_databases : dict
  supported_games : dict
  supported_sites : dict
  ui
  wrongConfigVersion : bool
  add_db_parameters(db_name, db_ip, db_user, db_pass, db_desc, db_server, default)
  add_missing_elements(doc, example_file)
  editEmail(siteName, fetchType, newEmail)
  editImportFilters(games)
  editStats(statsetName, statArray)
  edit_site(site_name, enabled, screen_name, history_path, summary_path)
  execution_path(filename)
  find_default_conf()
  getDefaultSite()
  getEmailNode(siteName, fetchType)
  getGameNode(gameName)
  getStatSetNode(statsetName)
  get_aux_node(aux)
  get_aux_parameters(name)
  get_aux_windows()
  get_backend(name)
  get_db_node(db_name)
  get_db_parameters()
  get_default_paths(site)
  get_doc()
  get_general_params()
  get_gui_cash_stat_params()
  get_hud_ui_parameters()
  get_import_parameters()
  get_layout(site, game_type)
  get_layout_node(ls, max)
  get_layout_set_locations(set, max)
  get_layout_set_node(ls)
  get_layout_set_parameters(name)
  get_layout_sets()
  get_location_node(layout_node, seat)
  get_site_id(site)
  get_site_node(site)
  get_site_parameters(site)
  get_stat_set_node(ss)
  get_stat_sets()
  get_supported_games()
  get_supported_games_parameters(name, game_type)
  get_supported_sites(all)
  save(file)
  save_layout_set(ls, max, locations, width, height)
  set_db_parameters(db_name, db_ip, db_user, db_pass, db_desc, db_server, default)
  set_general(lang)
  set_site_ids(sites)
  set_timezone(timezone)
  wrap_long_line(l)
  wrap_long_lines(s)
}
class "Database" as Configuration.Database {
  db_desc
  db_ip
  db_name
  db_pass
  db_path
  db_selected : bool
  db_server
  db_user
}
class "Email" as Configuration.Email {
  fetchType
  folder
  host
  node
  password
  useSsl
  username
}
class "GUICashStats" as Configuration.GUICashStats {
  add_elements(node)
  get_defaults()
}
class "Game_stat_set" as Configuration.Game_stat_set {
  game_type
  stat_set
}
class "General" as Configuration.General {
  add_elements(node)
  get_defaults()
}
class "HHC" as Configuration.HHC {
  converter
  site
  summaryImporter
}
class "HudUI" as Configuration.HudUI {
  agg_bb_mult
  card_back
  card_ht
  card_wd
  deck_type
  h_agg_bb_mult
  h_hud_days
  h_seats_cust_nums_high
  h_seats_cust_nums_low
  h_seats_style
  h_stat_range
  hud_days
  label
  node
  seats_cust_nums_high
  seats_cust_nums_low
  seats_style
  stat_range
}
class "Import" as Configuration.Import {
  ResultsDirectory
  cacheSessions : bool
  callFpdbHud : bool
  fastStoreHudCache : bool
  hhBulkPath
  importFilters : list
  interval
  node
  publicDB : bool
  saveActions : bool
  saveStarsHH : bool
  sessionTimeout : int, bool
  timezone : str
}
class "Layout" as Configuration.Layout {
  common : tuple
  height : int
  hh_seats : list
  location : list
  max : int
  width : int
}
class "Layout_set" as Configuration.Layout_set {
  layout : dict
}
class "Popup" as Configuration.Popup {
  name
  pu_class
  pu_stats : list
  pu_stats_submenu : list
}
class "RawHands" as Configuration.RawHands {
  compression : str
  save : str
}
class "RawTourneys" as Configuration.RawTourneys {
  compression : str
  save : str
}
class "Site" as Configuration.Site {
  HH_path : bytes, str
  TS_path : bytes, str
  aux_enabled : bool
  emails : dict
  enabled : bool
  fav_seat : dict
  hud_menu_xshift : int
  hud_menu_yshift : int
  layout_set : dict
  screen_name
  site_name
  site_path : bytes, str
}
class "Stat" as Configuration.Stat {
  click
  hudcolor
  hudprefix
  hudsuffix
  popup
  rowcol : tuple
  stat_hicolor
  stat_hith
  stat_locolor
  stat_loth
  stat_name
  tip
}
class "Stat_sets" as Configuration.Stat_sets {
  cols : int
  name
  rows : int
  stats : dict
  xpad : int
  ypad : int
}
class "Supported_games" as Configuration.Supported_games {
  game_stat_set : dict
}
Configuration.GUICashStats --* Configuration.Config : gui_cash_stats
Configuration.General --* Configuration.Config : general
Configuration.HudUI --* Configuration.Config : ui
Configuration.Import --* Configuration.Config : imp
Configuration.RawHands --* Configuration.Config : raw_hands
Configuration.RawHands --* Configuration.Config : raw_hands
Configuration.RawTourneys --* Configuration.Config : raw_tourneys
Configuration.RawTourneys --* Configuration.Config : raw_tourneys
@enduml
