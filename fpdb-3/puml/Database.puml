@startuml classes
set namespaceSeparator none
class "Database" as Database.Database {
  MYSQL_INNODB : int
  PGSQL : int
  SQLITE : int
  backend : NoneType
  bbulk : list
  build_full_hudcache
  cacheSessions
  callHud
  config
  connection : NoneType
  cursor : NoneType
  database : NoneType
  date_ndays_ago : str
  date_nhands_ago : dict
  day_start : float, int
  db_path : NoneType, str
  db_server
  dcbulk : dict
  foreignKeys : list
  gtcache : NoneType
  gtprintdata : bool
  h_date_ndays_ago : str
  habulk : list
  hand_1day_ago : int
  hand_inc : int
  hbulk : list
  hcbulk : dict
  hero : dict
  hero_hudstart_def : str
  hero_ids : dict, NoneType
  hids : list
  host : NoneType
  hpbulk : list
  hsbulk : list
  htbulk : list
  hud_style
  import_options
  indexes : list
  password : NoneType
  pcache : NoneType
  pcbulk : dict
  printdata : bool
  publicDB
  s : dict
  saveActions : bool
  sc : dict
  sessionTimeout : float
  settings : dict
  siteHandNos : list
  sql : NoneType
  tbulk : dict
  tc : dict
  tcache : NoneType
  threadId
  tpcache : NoneType
  ttnew : set
  ttold : set
  user : NoneType
  villain_hudstart_def : str
  wmnew : set
  wmold : set
  wrongDbVersion : bool
  acquireLock(wait, retry_time)
  afterBulkImport()
  analyzeDB()
  appendHandsSessionIds()
  check_version(database, create)
  cleanRequired()
  cleanUpTourneyTypes()
  cleanUpWeeksMonths()
  close_connection()
  commit()
  connect(backend, host, database, user, password, create)
  connected()
  createAllForeignKeys()
  createAllIndexes()
  createOrUpdateTourney(summary)
  createOrUpdateTourneyType(obj)
  createOrUpdateTourneysPlayers(summary)
  create_tables()
  defaultTourneyTypeValue(value1, value2, field)
  disconnect(due_to_error)
  do_connect(c)
  dropAllForeignKeys()
  dropAllIndexes()
  drop_referential_integrity()
  drop_tables()
  dumpDatabase()
  executemany(c, q, values)
  fetchallDict(cursor, desc)
  fillDefaultData()
  getHandCount()
  getHeroIds(pids, sitename)
  getSiteTourneyNos(site)
  getSqlGameTypeId(siteid, game, printdata)
  getSqlPlayerIDs(pnames, siteid, hero)
  getSqlTourneyIDs(hand)
  getSqlTourneyTypeIDs(hand)
  getSqlTourneysPlayersIDs(hand)
  getTourneyCount()
  getTourneyInfo(siteName, tourneyNo)
  getTourneyPlayerInfo(siteName, tourneyNo, playerName)
  getTourneyTypeCount()
  getTourneyTypesIds()
  get_action_from_hand(hand_no)
  get_actual_seat(hand_id, name)
  get_backend_name()
  get_cards(hand)
  get_common_cards(hand)
  get_cursor(connect)
  get_db_info()
  get_gameinfo_from_hid(hand_id)
  get_hero_hudcache_start()
  get_id(file)
  get_last_hand()
  get_last_insert_id(cursor)
  get_player_id(config, siteName, playerName)
  get_player_names(config, site_id, like_player_name)
  get_recent_hands(last_hand)
  get_site_id(site)
  get_sites()
  get_stats_from_hand(hand, type, hud_params, hero_id, num_seats)
  get_stats_from_hand_session(hand, stat_dict, hero_id, stat_range, seats_min, seats_max, h_stat_range, h_seats_min, h_seats_max)
  get_table_info(hand_id)
  get_table_name(hand_id)
  get_winners_from_hand(hand)
  get_xml(hand_id)
  init_hud_stat_vars(hud_days, h_hud_days)
  insertGameTypes(gtinfo, gtinsert)
  insertOrUpdate(type, cursor, key, select, insert)
  insertPlayer(name, site_id, hero)
  insertTourneysPlayers(playerId, tourneyId, entryId)
  isDuplicate(siteId, siteHandNo, heroSeat, publicDB)
  is_connected()
  lock_for_insert()
  nextHandId()
  prepareBulkImport()
  rebuild_cache(h_start, v_start, table, ttid, wmid)
  rebuild_caches()
  rebuild_indexes(start)
  reconnect(due_to_error)
  recreate_tables()
  releaseLock()
  replace_statscache(type, table, query)
  resetBulkCache(reconnect)
  resetCache()
  resetClean()
  rollback()
  setThreadId(threadid)
  set_hud_style(style)
  set_printdata(val)
  storeBoards(id, boards, doinsert)
  storeCardsCache(hid, pids, startTime, gametypeId, tourneyTypeId, pdata, heroes, tz_name, doinsert)
  storeFile(fdata)
  storeHand(hdata, doinsert, printdata)
  storeHandsActions(hid, pids, adata, doinsert, printdata)
  storeHandsPlayers(hid, pids, pdata, doinsert, printdata)
  storeHandsPots(tdata, doinsert)
  storeHandsStove(sdata, doinsert)
  storeHudCache(gid, gametype, pids, starttime, pdata, doinsert)
  storePositionsCache(hid, pids, startTime, gametypeId, tourneyTypeId, pdata, hdata, heroes, tz_name, doinsert)
  storeSessions(hid, pids, startTime, tid, heroes, tz_name, doinsert)
  storeSessionsCache(hid, pids, startTime, gametypeId, gametype, pdata, heroes, doinsert)
  storeTourneysCache(hid, pids, startTime, tid, gametype, pdata, heroes, doinsert)
  updateFile(fdata)
  updateTourneyPlayerBounties(hand)
  updateTourneysSessions()
  update_timezone(tz_name)
  vacuumDB()
}
class "LambdaDict" as Database.LambdaDict {
  l
}
class "VARIANCE" as Database.VARIANCE {
  store : list
  finalize()
  step(value)
}
class "sqlitemath" as Database.sqlitemath {
  mod(a, b)
}
Database.LambdaDict --* Database.Database : gtcache
Database.LambdaDict --* Database.Database : pcache
Database.LambdaDict --* Database.Database : tpcache
@enduml
