@startuml classes
set namespaceSeparator none
class "HandHistoryConverter" as HandHistoryConverter.HandHistoryConverter {
  READ_CHUNK_SIZE : int
  autoPop : bool
  base_name
  codepage : str
  codepage : str
  compiledPlayers : set
  config
  copyGameHeader : bool
  doc : Document
  filetype : str
  filetype : str
  ftpArchive : bool
  import_parameters
  in_fh : StreamRecoder, TextIOWrapper
  in_path : str
  index : int
  isCarraige : bool
  kodec : NoneType
  maxseats : int
  numErrors : int
  numHands : int
  numPartial : int
  numSkipped : int
  obs : str
  out_fh : StreamRecoder, StreamWrapper, StreamReaderWriter
  out_path : str
  parsedObjectType : str
  processedHands : list
  re_tzOffset
  sitename : str
  starsArchive : bool
  status : bool
  summaryInFile : bool
  tourney : NoneType
  whole_file
  allHandsAsList()
  changeTimezone(time, givenTimezone, wantedTimezone)
  clearMoneyString(money)
  compilePlayerRegexs()
  determineGameType(handText)
  getBasename()
  getLastCharacterRead()
  getParsedObjectType()
  getProcessedFile()
  getProcessedHands()
  getRake(hand)
  getStatus()
  getTableNoRe(tournament)
  getTableTitleRe(type, table_name, tournament, table_number)
  getTourney()
  guessMaxSeats(hand)
  isPartial(handText)
  isSummary(topline)
  markStreets(hand)
  maxOccSeat(hand)
  processHand(handText)
  readAction(hand, street)
  readAntes(hand)
  readBlinds(hand)
  readBringIn(hand)
  readButton(hand)
  readCollectPot(hand)
  readFile()
  readHandInfo(hand)
  readHoleCards(hand)
  readOther(hand)
  readPlayerStacks(hand)
  readSTP(hand)
  readShownCards(hand)
  readSummaryInfo(summaryInfoList)
  readSupportedGames()
  readTourneyResults(hand)
  sanityCheck()
  setAutoPop(value)
  setFileType(filetype, codepage)
  setObs(text)
  start()
}
@enduml
